{"version":3,"sources":["components/Header.js","components/Table.js","components/TabData.js","exercices/Exercice2.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","src","alt","title","Table","id","name","city","phone","siteURL","TabData","state","data","isLoading","this","setState","fetch","then","response","json","map","info","website_url","Component","Exercice2","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gOAmBeA,MAjBf,SAAgBC,GACf,OACC,4BAAQC,UAAU,sFAChB,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,iGACb,yBAAKA,UAAU,gFACb,yBAAKC,IAAI,aAAaD,UAAU,eAAeE,IAAI,SACnD,0BAAMF,UAAU,uHACbD,EAAMI,Y,OCIJC,MAZf,SAAeL,GACd,OACC,4BACC,4BAAKA,EAAMM,IACX,4BAAKN,EAAMO,MACX,4BAAKP,EAAMQ,MACX,4BAAKR,EAAMS,OACX,4BAAKT,EAAMU,W,oCCkCCC,E,kDAvCb,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IAEDY,MAAQ,CACXC,KAAM,GACNC,WAAW,GALI,E,gEASE,IAAD,OAClBC,KAAKC,SAAS,CAAEF,WAAW,IAC3BG,MAAM,2CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAL,GAAI,OAAI,EAAKG,SAAS,CAAEH,OAAMC,WAAW,S,+BAGzC,IAAD,EACqBC,KAAKH,MAAzBC,EADD,EACCA,KAER,OAHO,EACOC,UAGL,6BAAK,yBAAKZ,IAAI,oBAAoBC,IAAI,MAI7C,2BAAOF,UAAU,qBACdY,EAAKQ,KAAI,SAAAC,GAAI,OACZ,kBAAC,EAAD,CACEhB,GAAIgB,EAAKhB,GACTC,KAAMe,EAAKf,KACXC,KAAMc,EAAKd,KACXC,MAAOa,EAAKb,MACZC,QAASY,EAAKC,sB,GAhCJC,aCkCPC,MA/Bf,WACC,OACC,6BAEC,kBAAC,EAAD,CAAQrB,MAAM,oBAEd,0BAAMH,UAAU,qCACf,yBAAKA,UAAU,QACd,yBAAKA,UAAU,8EACd,wBAAIA,UAAU,6BAAd,mBACA,yBAAKA,UAAU,iBACd,2BAAOA,UAAU,SAChB,+BACC,4BACC,kCACA,oCACA,oCACA,qCACA,6CAGF,kBAAC,EAAD,aCjBOyB,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.57e18114.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header(props) {\n\treturn (\n\t\t<header className=\"bg-content-white w-full border-b border-brand-tertiary flex justify-center py-20px\">\n\t\t  <div className=\"grid undefined\">\n\t\t    <div className=\"xl:col-span-12 lg:col-span-12 md:col-span-12 sm:col-span-6 xs:col-span-4 flex justify-between\">\n\t\t      <div className=\"flex xl:items-center lg:items-center md:items-center sm:flex-col xs:flex-col\">\n\t\t        <img src=\"./logo.png\" className=\"logo mr-20px\" alt=\"Vybe\"/>\n\t\t        <span className=\"border-brand-tertiary py-2 headbar-text_mobile xl:border-l lg:border-l md:border-l xl:px-20px lg:px-20px md:px-20px\">\n\t\t          {props.title}\n\t\t        </span>\n\t\t      </div>\n\t\t    </div>\n\t\t  </div>\n\t\t</header>\n\t)\n}\n\nexport default Header","import React from 'react';\n\nfunction Table(props) {\n\treturn (\n\t\t<tr>\n\t\t\t<td>{props.id}</td>\n\t\t\t<td>{props.name}</td>\n\t\t\t<td>{props.city}</td>\n\t\t\t<td>{props.phone}</td>\n\t\t\t<td>{props.siteURL}</td>\n\t\t</tr>\n\t)\n}\n\nexport default Table","import React, { Component } from 'react';\nimport Table from './Table';\n \nclass TabData extends Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n      data: [],\n      isLoading: false,\n    };\n  }\n \n  componentDidMount() {\n    this.setState({ isLoading: true });\n    fetch('https://api.openbrewerydb.org/breweries')\n      .then(response => response.json())\n      .then(data => this.setState({ data, isLoading: false }));\n  }\n  \n  render() {\n    const { data, isLoading } = this.state;\n\n    if (isLoading) {\n      return <div><img src=\"./ajax-loader.gif\" alt=\"\"/></div>;\n    }\n  \n    return (\n      <tbody className=\"text-content-dark\">\n        {data.map(info =>\n          <Table\n            id={info.id}\n            name={info.name}\n            city={info.city}\n            phone={info.phone}\n            siteURL={info.website_url}\n          />\n        )}\n      </tbody>\n    );\n  }\n}\n \nexport default TabData;","import React from \"react\";\nimport { Grid, DropdownMenu, NavItem } from '@vybe/vybecard-design-systems';\nimport Header from './../components/Header';\nimport Table from './../components/Table';\nimport TabData from './../components/TabData';\n\nfunction Exercice2() {\n\treturn (\n\t\t<div>\n\t\t\t{/*Header*/}\n\t\t\t<Header title=\"exercice nÂ°2\" />\n\t\t\t{/*Main*/}\n\t\t\t<main className=\"bg-content-grey_ultra_light py-12\">\n\t\t\t\t<div className=\"grid\">\n\t\t\t\t\t<div className=\"xl:col-span-12 lg:col-span-12 md:col-span-12 sm:col-span-12 xs:col-span-12\">\n\t\t\t\t\t\t<h2 className=\"H2 text-content-dark mb-5\">Bar list - Vybe</h2>\n\t\t\t\t\t\t<div className=\"table-wrapper\">\n\t\t\t\t\t\t\t<table className=\"table\">\n\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t<th>ID</th>\n\t\t\t\t\t\t\t\t\t\t<th>NAME</th>\n\t\t\t\t\t\t\t\t\t\t<th>CITY</th>\n\t\t\t\t\t\t\t\t\t\t<th>PHONE</th>\n\t\t\t\t\t\t\t\t\t\t<th>WEBSITE_URL</th>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t<TabData />\n\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</main>\n\t\t</div>\n\t)\n}\n\nexport default Exercice2","import React from 'react';\nimport Exercice1 from './exercices/Exercice1';\nimport Exercice2 from './exercices/Exercice2';\n\nfunction App() {\n  return (\n    <Exercice2 />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}